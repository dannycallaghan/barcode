/*!
 * barcode
 * Bar Code
 * 
 * @author Danny Callaghan
 * @version 1.0.0
 * Copyright 2019. MIT licensed.
 */
!function(){function t(e,n,r){function o(a,s){if(!n[a]){if(!e[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};e[a][0].call(l.exports,function(t){var n=e[a][1][t];return o(n||t)},l,l.exports,t,e,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}return t}()({1:[function(t,e,n){},{}],2:[function(t,e,n){!function(t,r){"object"==typeof n&&"undefined"!=typeof e?r(n):"function"==typeof define&&define.amd?define(["exports"],r):r(t.WHATWGFetch={})}(this,function(t){"use strict";function e(t){return t&&DataView.prototype.isPrototypeOf(t)}function n(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function r(t){return"string"!=typeof t&&(t=String(t)),t}function o(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return w.iterable&&(e[Symbol.iterator]=function(){return e}),e}function i(t){this.map={},t instanceof i?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function a(t){return t.bodyUsed?Promise.reject(new TypeError("Already read")):void(t.bodyUsed=!0)}function s(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function u(t){var e=new FileReader,n=s(e);return e.readAsArrayBuffer(t),n}function c(t){var e=new FileReader,n=s(e);return e.readAsText(t),n}function l(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}function f(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function d(){return this.bodyUsed=!1,this._initBody=function(t){this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:w.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:w.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:w.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():w.arrayBuffer&&w.blob&&e(t)?(this._bodyArrayBuffer=f(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):w.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||E(t))?this._bodyArrayBuffer=f(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):w.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},w.blob&&(this.blob=function(){var t=a(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?a(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(u)}),this.text=function(){var t=a(this);if(t)return t;if(this._bodyBlob)return c(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(l(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},w.formData&&(this.formData=function(){return this.text().then(y)}),this.json=function(){return this.text().then(JSON.parse)},this}function h(t){var e=t.toUpperCase();return T.indexOf(e)>-1?e:t}function p(t,e){e=e||{};var n=e.body;if(t instanceof p){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new i(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new i(e.headers)),this.method=h(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function y(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(o))}}),e}function b(t){var e=new i,n=t.replace(/\r?\n[\t ]+/g," ");return n.split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();e.append(r,o)}}),e}function m(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new i(e.headers),this.url=e.url||"",this._initBody(t)}function v(e,n){return new Promise(function(r,o){function i(){s.abort()}var a=new p(e,n);if(a.signal&&a.signal.aborted)return o(new t.DOMException("Aborted","AbortError"));var s=new XMLHttpRequest;s.onload=function(){var t={status:s.status,statusText:s.statusText,headers:b(s.getAllResponseHeaders()||"")};t.url="responseURL"in s?s.responseURL:t.headers.get("X-Request-URL");var e="response"in s?s.response:s.responseText;r(new m(e,t))},s.onerror=function(){o(new TypeError("Network request failed"))},s.ontimeout=function(){o(new TypeError("Network request failed"))},s.onabort=function(){o(new t.DOMException("Aborted","AbortError"))},s.open(a.method,a.url,!0),"include"===a.credentials?s.withCredentials=!0:"omit"===a.credentials&&(s.withCredentials=!1),"responseType"in s&&w.blob&&(s.responseType="blob"),a.headers.forEach(function(t,e){s.setRequestHeader(e,t)}),a.signal&&(a.signal.addEventListener("abort",i),s.onreadystatechange=function(){4===s.readyState&&a.signal.removeEventListener("abort",i)}),s.send("undefined"==typeof a._bodyInit?null:a._bodyInit)})}var w={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(w.arrayBuffer)var g=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],E=ArrayBuffer.isView||function(t){return t&&g.indexOf(Object.prototype.toString.call(t))>-1};i.prototype.append=function(t,e){t=n(t),e=r(e);var o=this.map[t];this.map[t]=o?o+", "+e:e},i.prototype["delete"]=function(t){delete this.map[n(t)]},i.prototype.get=function(t){return t=n(t),this.has(t)?this.map[t]:null},i.prototype.has=function(t){return this.map.hasOwnProperty(n(t))},i.prototype.set=function(t,e){this.map[n(t)]=r(e)},i.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},i.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),o(t)},i.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),o(t)},i.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),o(t)},w.iterable&&(i.prototype[Symbol.iterator]=i.prototype.entries);var T=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];p.prototype.clone=function(){return new p(this,{body:this._bodyInit})},d.call(p.prototype),d.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new i(this.headers),url:this.url})},m.error=function(){var t=new m(null,{status:0,statusText:""});return t.type="error",t};var k=[301,302,303,307,308];m.redirect=function(t,e){if(k.indexOf(e)===-1)throw new RangeError("Invalid status code");return new m(null,{status:e,headers:{location:t}})},t.DOMException=self.DOMException;try{new t.DOMException}catch(_){t.DOMException=function(t,e){this.message=t,this.name=e;var n=Error(t);this.stack=n.stack},t.DOMException.prototype=Object.create(Error.prototype),t.DOMException.prototype.constructor=t.DOMException}v.polyfill=!0,self.fetch||(self.fetch=v,self.Headers=i,self.Request=p,self.Response=m),t.Headers=i,t.Request=p,t.Response=m,t.fetch=v,Object.defineProperty(t,"__esModule",{value:!0})})},{}],3:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=t("../utils"),s=r(a),u=(t("inspector"),function(){function t(){o(this,t)}return i(t,null,[{key:"API_URL",value:function(t,e){var n="https://www.thecocktaildb.com/api/json/v1/1/",r=this.TEST_MODE?".json":".php",o="",i=void 0;switch(this.TEST_MODE&&(n="/local_data"),t){case"random":i="random";break;case"by-id":i="lookup",o="?i="+e;break;case"filter":i="filter",o="?i="+e;break;case"virgin":i="filter",o="?a="+e}return""+n+i+r+o}},{key:"getCocktailDetails",value:function(t,e){var n=this,r=function(t){s["default"].TemplateEngine.createHTML(""+n.DETAILS_TEMPLATE,{data:t},"cocktail-data")};fetch(""+this.API_URL(t,e)).then(function(t){return t.json()}).then(function(t){r(t)})["catch"](function(t){s["default"].TemplateEngine.noData("cocktail-data")})}},{key:"getCocktails",value:function(){var t=this,e=window.location.search;if(e&&e.indexOf("list=")){var n=e.split("list=")[1];if(n&&n.length){var r=n.toLowerCase(),o=function(e){s["default"].TemplateEngine.createHTML(""+t.LIST_TEMPLATE,{data:e},"cocktail-data")};switch(r){case"popular":var i=this.POPULAR_IDS.map(function(e){return fetch(""+t.API_URL("by-id",e)).then(function(t){return t.json()})});Promise.all(i).then(function(t){o(t)})["catch"](function(t){s["default"].TemplateEngine.noData("cocktail-data")});break;case"virgin":fetch(""+this.API_URL("virgin","non_alcoholic")).then(function(t){return t.json()}).then(function(t){o(t)})["catch"](function(t){s["default"].TemplateEngine.noData("cocktail-data")});break;default:fetch(""+this.API_URL("filter",r)).then(function(t){return t.json()}).then(function(t){o(t)})["catch"](function(t){s["default"].TemplateEngine.noData("cocktail-data")})}return}}window.location.href="/"}},{key:"getCocktail",value:function(){var t=window.location.search;if(t&&t.indexOf("id=")){var e=t.split("id=")[1];if(e&&e.length&&(parseInt(e)||"random"===e)){var n=e;return"random"===n?void this.getCocktailDetails("random"):void this.getCocktailDetails("by-id",n)}}window.location.href="/"}},{key:"TEST_MODE",get:function(){return!1}},{key:"DETAILS_TEMPLATE",get:function(){return"cocktail_details"}},{key:"LIST_TEMPLATE",get:function(){return"cocktails_list"}},{key:"POPULAR_IDS",get:function(){return[11e3,11001,11002,11007,17207]}}]),t}());n["default"]=u},{"../utils":6,inspector:1}],4:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}t("whatwg-fetch");var o=t("./drinks-api"),i=r(o),a=t("./news"),s=r(a),u=t("./utils"),c=r(u);document.addEventListener("DOMContentLoaded",function(t){var e=new c["default"].Drawer;e.init();var n=new c["default"].ShrinkHeader;n.init(),c["default"].backToTop(),document.getElementById("splash-screen")&&c["default"].startSplash(),document.getElementById("category-list")&&(i["default"].getCocktails(),c["default"].activateFullDetailButtons()),document.getElementById("category-cocktail")&&(i["default"].getCocktail(),c["default"].activateFullDetailButtons()),document.getElementById("category-cocktail-news")&&(s["default"].getAllNews(),c["default"].activateFullDetailButtons()),document.getElementById("category-cocktail-article")&&s["default"].getNews()})},{"./drinks-api":3,"./news":5,"./utils":6,"whatwg-fetch":2}],5:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=t("../utils"),s=r(a),u=function(){function t(){o(this,t)}return i(t,null,[{key:"getAllNews",value:function(){var t=this,e=function(e){s["default"].TemplateEngine.createHTML(""+t.NEWS_TEMPLATE,{data:e},"cocktail-news")};fetch(""+this.NEWS_URL).then(function(t){return t.json()}).then(function(t){e(t)})["catch"](function(t){s["default"].TemplateEngine.noData("cocktail-news")})}},{key:"getNews",value:function(){var t=this,e=window.location.search;if(e&&e.indexOf("id=")){var n=e.split("id=")[1];if(n&&n.length&&parseInt(n,10)){var r=parseInt(n,10),o=function(e){var n=e.filter(function(t){return t.id===r});return n.length?void s["default"].TemplateEngine.createHTML(""+t.NEWS_TEMPLATE,{data:n},"cocktail-news"):void(window.location.href="/")};return void fetch(""+this.NEWS_URL).then(function(t){return t.json()}).then(function(t){o(t)})["catch"](function(t){s["default"].TemplateEngine.noData("cocktail-news")})}}window.location.href="/"}},{key:"NEWS_TEMPLATE",get:function(){return"cocktail_news"}},{key:"NEWS_URL",get:function(){return"/data/news.json"}}]),t}();n["default"]=u},{"../utils":6}],6:[function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function a(){r(this,a)};i.ShrinkHeader=function(){function t(){r(this,t),this.scrollPos=64,this.shrinkClass="body--scrolled"}return o(t,[{key:"init",value:function(){var t=this;document.querySelectorAll(".video-wrapper").length||(window.addEventListener("scroll",function(e){t.scrollPage()},!1),this.scrollPage())}},{key:"scrollPage",value:function(){var t=document.body,e=this.scrolledPos();e>this.scrollPos?t.classList.add(this.shrinkClass):t.classList.remove(this.shrinkClass)}},{key:"scrolledPos",value:function(){return window.pageYOffset||document.documentElement.scrollTop}}]),t}(),i.Drawer=function(){function t(){r(this,t),this.menuButtons=document.querySelectorAll(".toggle-drawer"),this.drawerElement=document.querySelector(".drawer"),this.cloak=document.getElementById("cloak"),this.drawerClass="body--drawer-visible",this.body=document.body}return o(t,[{key:"init",value:function(){var t=this;[].slice.call(this.menuButtons).forEach(function(e){e.addEventListener("click",function(e){t.toggleDrawer()},!1)}),this.cloak.addEventListener("click",function(e){t.toggleDrawer()},!1)}},{key:"toggleDrawer",value:function(){this.body.classList.toggle(this.drawerClass),this.toggleAriaAttr()}},{key:"toggleAriaAttr",value:function(){this.body.classList.contains(this.drawerClass)?this.drawerElement.setAttribute("aria-hidden",!1):this.drawerElement.setAttribute("aria-hidden",!0)}}]),t}(),i.TemplateEngine=function(){function t(){r(this,t)}return o(t,null,[{key:"createHTML",value:function(t,e,n){var r=document.getElementById(n);r&&(r.innerHTML=this.templateToHTML(t,e));var o=new Event("templateLoaded");window.dispatchEvent(o)}},{key:"templateToHTML",value:function(t,e){var n=/\W/.test(t)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+t.replace(/[\r\t\n]/g," ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):this.CACHE[t]=this.CACHE[t]||this.templateToHTML(document.getElementById(t).innerHTML);return e?n(e):n}},{key:"noData",value:function(t){document.body.classList.remove("pending"),document.getElementById(t).innerHTML='<p class="no-data"><i class="material-icons">error_outline</i> Uh oh! We\'re unable to display that infomation. Please check your connection and try again.</p>'}},{key:"CACHE",get:function(){return{}}}]),t}(),i.backToTop=function(){var t=document.getElementById("back-to-top");t&&t.addEventListener("click",function(t){window.scrollTo(0,0),t.preventDefault()},!1)},i.startSplash=function(){var t=500,e=3e3,n=document.body;window.setTimeout(function(){n.classList.remove("splash-1")},t),window.setTimeout(function(){n.classList.remove("splash-2")},e)},i.getHeightForVideo=function(){var t=.01*window.innerHeight;document.documentElement.style.setProperty("--viewHeight",t+"px")},i.activateFullDetailButtons=function(){var t=function(){var t=document.querySelectorAll("button.full-details-button");t.length&&[].slice.call(t).forEach(function(t){t.addEventListener("click",function(t){window.location.href=t.target.dataset.link,t.preventDefault()},!1)})},e=function(){document.body.classList.remove("pending")};window.addEventListener("templateLoaded",function(n){e(),t()},!1)},n["default"]=i},{}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
