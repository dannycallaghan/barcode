/*!
 * magsmag
 * MagsMag
 * 
 * @author Danny Callaghan
 * @version 0.0.1
 * Copyright 2019. MIT licensed.
 */
!function(){function t(e,n,i){function o(a,c){if(!n[a]){if(!e[a]){var u="function"==typeof require&&require;if(!c&&u)return u(a,!0);if(r)return r(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var s=n[a]={exports:{}};e[a][0].call(s.exports,function(t){var n=e[a][1][t];return o(n||t)},s,s.exports,t,e,n,i)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<i.length;a++)o(i[a]);return o}return t}()({1:[function(t,e,n){},{}],2:[function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=t("../utils"),c=i(a),u=(t("inspector"),function(){function t(){o(this,t)}return r(t,null,[{key:"API_URL",value:function(t,e){var n="https://www.thecocktaildb.com/api/json/v1/1/",i=this.TEST_MODE?".json":".php",o="",r=void 0;switch(this.TEST_MODE&&(n="/local_data"),t){case"random":r="random";break;case"by-id":r="lookup",o="?i="+e;break;case"filter":r="filter",o="?i="+e;break;case"virgin":r="filter",o="?a="+e}return""+n+r+i+o}},{key:"getCocktailDetails",value:function(t,e){var n=this,i=function(t){c["default"].TemplateEngine.createHTML(""+n.DETAILS_TEMPLATE,{data:t},"cocktail-data")};fetch(""+this.API_URL(t,e)).then(function(t){return t.json()}).then(function(t){i(t)})["catch"](function(t){})}},{key:"getCocktails",value:function(){var t=this,e=window.location.search;if(e&&e.indexOf("list=")){var n=e.split("list=")[1];if(n&&n.length){var i=n.toLowerCase(),o=function(e){console.warn(e),c["default"].TemplateEngine.createHTML(""+t.LIST_TEMPLATE,{data:e},"cocktail-data")};switch(i){case"popular":var r=this.POPULAR_IDS.map(function(e){return fetch(""+t.API_URL("by-id",e)).then(function(t){return t.json()})});Promise.all(r).then(function(t){o(t)})["catch"](function(t){});break;case"virgin":fetch(""+this.API_URL("virgin","non_alcoholic")).then(function(t){return t.json()}).then(function(t){o(t)})["catch"](function(t){});break;default:fetch(""+this.API_URL("filter",i)).then(function(t){return t.json()}).then(function(t){o(t)})["catch"](function(t){})}return}}window.location.href="/"}},{key:"getCocktail",value:function(){console.warn("still called");var t=window.location.search;if(t&&t.indexOf("id=")){var e=t.split("id=")[1];if(e&&e.length&&(parseInt(e)||"random"===e)){var n=e;return"random"===n?void this.getCocktailDetails("random"):void this.getCocktailDetails("by-id",n)}}window.location.href="/"}},{key:"TEST_MODE",get:function(){return!1}},{key:"DETAILS_TEMPLATE",get:function(){return"cocktail_details"}},{key:"LIST_TEMPLATE",get:function(){return"cocktails_list"}},{key:"POPULAR_IDS",get:function(){return[11e3,11001,11002,11007,17207]}}]),t}());n["default"]=u},{"../utils":5,inspector:1}],3:[function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}var o=t("./drinks-api"),r=i(o),a=t("./news"),c=i(a),u=t("./utils"),l=i(u);document.addEventListener("DOMContentLoaded",function(t){var e=new l["default"].Drawer;e.init();var n=new l["default"].ShrinkHeader;n.init(),l["default"].backToTop(),document.getElementById("splash-screen")&&l["default"].startSplash(),document.getElementById("category-list")&&(r["default"].getCocktails(),l["default"].activateFullDetailButtons()),document.getElementById("category-cocktail")&&(r["default"].getCocktail(),l["default"].activateFullDetailButtons()),document.getElementById("category-cocktail-news")&&(c["default"].getAllNews(),l["default"].activateFullDetailButtons()),document.getElementById("category-cocktail-article")&&c["default"].getNews()})},{"./drinks-api":2,"./news":4,"./utils":5}],4:[function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=t("../utils"),c=i(a),u=function(){function t(){o(this,t)}return r(t,null,[{key:"getAllNews",value:function(){var t=this,e=function(e){c["default"].TemplateEngine.createHTML(""+t.NEWS_TEMPLATE,{data:e},"cocktail-news")};fetch(""+this.NEWS_URL).then(function(t){return t.json()}).then(function(t){e(t)})["catch"](function(t){})}},{key:"getNews",value:function(){var t=this,e=window.location.search;if(e&&e.indexOf("id=")){var n=e.split("id=")[1];if(n&&n.length&&parseInt(n,10)){var i=parseInt(n,10),o=function(e){var n=e.filter(function(t){return t.id===i});c["default"].TemplateEngine.createHTML(""+t.NEWS_TEMPLATE,{data:n},"cocktail-news")};return void fetch(""+this.NEWS_URL).then(function(t){return t.json()}).then(function(t){o(t)})["catch"](function(t){})}}window.location.href="/"}},{key:"TEST_MODE",get:function(){return!1}},{key:"NEWS_TEMPLATE",get:function(){return"cocktail_news"}},{key:"NEWS_URL",get:function(){return"/data/news.json"}}]),t}();n["default"]=u},{"../utils":5}],5:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function a(){i(this,a)};r.ShrinkHeader=function(){function t(){i(this,t),this.scrollPos=64,this.shrinkClass="body--scrolled"}return o(t,[{key:"init",value:function(){var t=this;window.addEventListener("scroll",function(e){t.scrollPage()},!1),this.scrollPage()}},{key:"scrollPage",value:function(){var t=document.body,e=this.scrolledPos();e>this.scrollPos?t.classList.add(this.shrinkClass):t.classList.remove(this.shrinkClass)}},{key:"scrolledPos",value:function(){return window.pageYOffset||document.documentElement.scrollTop}}]),t}(),r.Drawer=function(){function t(){i(this,t),this.menuButtons=document.querySelectorAll(".toggle-drawer"),this.drawerElement=document.querySelector(".drawer"),this.cloak=document.getElementById("cloak"),this.drawerClass="body--drawer-visible",this.body=document.body}return o(t,[{key:"init",value:function(){var t=this;[].slice.call(this.menuButtons).forEach(function(e){e.addEventListener("click",function(e){t.toggleDrawer()},!1)}),this.cloak.addEventListener("click",function(e){t.toggleDrawer()},!1)}},{key:"toggleDrawer",value:function(){this.body.classList.toggle(this.drawerClass),this.toggleAriaAttr()}},{key:"toggleAriaAttr",value:function(){this.body.classList.contains(this.drawerClass)?this.drawerElement.setAttribute("aria-hidden",!1):this.drawerElement.setAttribute("aria-hidden",!0)}}]),t}(),r.TemplateEngine=function(){function t(){i(this,t)}return o(t,null,[{key:"createHTML",value:function(t,e,n){var i=document.getElementById(n);i&&(i.innerHTML=this.templateToHTML(t,e));var o=new Event("templateLoaded");window.dispatchEvent(o)}},{key:"templateToHTML",value:function(t,e){var n=/\W/.test(t)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+t.replace(/[\r\t\n]/g," ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):this.CACHE[t]=this.CACHE[t]||this.templateToHTML(document.getElementById(t).innerHTML);return e?n(e):n}},{key:"CACHE",get:function(){return{}}}]),t}(),r.backToTop=function(){var t=document.getElementById("back-to-top");t&&t.addEventListener("click",function(t){window.scrollTo(0,0),t.preventDefault()},!1)},r.startSplash=function(){var t=500,e=3e3,n=document.body;window.setTimeout(function(){n.classList.remove("splash-1")},t),window.setTimeout(function(){n.classList.remove("splash-2")},e)},r.getHeightForVideo=function(){var t=.01*window.innerHeight;document.documentElement.style.setProperty("--viewHeight",t+"px")},r.activateFullDetailButtons=function(){var t=function(){var t=document.querySelectorAll("button.full-details-button");console.warn(t.length),t.length&&[].slice.call(t).forEach(function(t){t.addEventListener("click",function(t){window.location.href=t.target.dataset.link,t.preventDefault()},!1)})},e=function(){document.body.classList.remove("pending")};window.addEventListener("templateLoaded",function(n){e(),t()},!1)},n["default"]=r},{}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
