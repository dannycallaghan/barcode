/*!
 * magsmag
 * MagsMag
 * 
 * @author Danny Callaghan
 * @version 0.0.1
 * Copyright 2019. MIT licensed.
 */
!function(){function t(e,n,i){function r(a,c){if(!n[a]){if(!e[a]){var l="function"==typeof require&&require;if(!c&&l)return l(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var s=n[a]={exports:{}};e[a][0].call(s.exports,function(t){var n=e[a][1][t];return r(n||t)},s,s.exports,t,e,n,i)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}return t}()({1:[function(t,e,n){},{}],2:[function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=t("../utils"),c=i(a),l=(t("inspector"),function(){function t(){r(this,t)}return o(t,null,[{key:"API_URL",value:function(t,e){var n="https://www.thecocktaildb.com/api/json/v1/1/",i=this.TEST_MODE?".json":".php",r="",o=void 0;switch(this.TEST_MODE&&(n="/local_data"),t){case"random":o="random";break;case"by-id":o="lookup",r="?i="+e;break;case"filter":o="filter",r="?i="+e;break;case"virgin":o="filter",r="?a="+e}return""+n+o+i+r}},{key:"getCocktailDetails",value:function(t,e){var n=this,i=function(t){c["default"].TemplateEngine.createHTML(""+n.DETAILS_TEMPLATE,{data:t},"cocktail-data")};fetch(""+this.API_URL(t,e)).then(function(t){return t.json()}).then(function(t){i(t)})["catch"](function(t){})}},{key:"getCocktails",value:function(){var t=this,e=window.location.search;if(e&&e.indexOf("list=")){var n=e.split("list=")[1];if(n&&n.length){var i=n.toLowerCase(),r=function(e){console.warn(e),c["default"].TemplateEngine.createHTML(""+t.LIST_TEMPLATE,{data:e},"cocktail-data")};switch(i){case"popular":var o=this.POPULAR_IDS.map(function(e){return fetch(""+t.API_URL("by-id",e)).then(function(t){return t.json()})});Promise.all(o).then(function(t){r(t)})["catch"](function(t){});break;case"virgin":fetch(""+this.API_URL("virgin","non_alcoholic")).then(function(t){return t.json()}).then(function(t){r(t)})["catch"](function(t){});break;default:fetch(""+this.API_URL("filter",i)).then(function(t){return t.json()}).then(function(t){r(t)})["catch"](function(t){})}return}}}},{key:"getCocktail",value:function(){var t=window.location.search;if(t&&t.indexOf("id=")){var e=t.split("id=")[1];if(e&&e.length&&(parseInt(e)||"random"===e)){var n=e;return"random"===n?void this.getCocktailDetails("random"):void this.getCocktailDetails("by-id",n)}}window.location.href="/"}},{key:"TEST_MODE",get:function(){return!1}},{key:"DETAILS_TEMPLATE",get:function(){return"cocktail_details"}},{key:"LIST_TEMPLATE",get:function(){return"cocktails_list"}},{key:"POPULAR_IDS",get:function(){return[11e3,11001,11002,11007,17207]}}]),t}());n["default"]=l},{"../utils":4,inspector:1}],3:[function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}var r=t("./drinks-api"),o=i(r),a=t("./utils"),c=i(a);document.addEventListener("DOMContentLoaded",function(t){var e=new c["default"].Drawer;e.init();var n=new c["default"].ShrinkHeader;n.init(),c["default"].backToTop(),document.getElementById("category-list")&&o["default"].getCocktails(),document.getElementById("category-cocktail")&&(console.warn("OK"),o["default"].getCocktail())})},{"./drinks-api":2,"./utils":4}],4:[function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=function a(){i(this,a)};o.ShrinkHeader=function(){function t(){i(this,t),this.scrollPos=64,this.shrinkClass="body--scrolled"}return r(t,[{key:"init",value:function(){var t=this;window.addEventListener("scroll",function(e){t.scrollPage(),console.warn("scrolled")},!1),this.scrollPage()}},{key:"scrollPage",value:function(){var t=document.body,e=this.scrolledPos();e>this.scrollPos?t.classList.add(this.shrinkClass):t.classList.remove(this.shrinkClass)}},{key:"scrolledPos",value:function(){return window.pageYOffset||document.documentElement.scrollTop}}]),t}(),o.Drawer=function(){function t(){i(this,t),this.menuButtons=document.querySelectorAll(".toggle-drawer"),this.drawerElement=document.querySelector(".drawer"),this.cloak=document.getElementById("cloak"),this.drawerClass="body--drawer-visible",this.body=document.body}return r(t,[{key:"init",value:function(){var t=this;[].slice.call(this.menuButtons).forEach(function(e){e.addEventListener("click",function(e){t.toggleDrawer()},!1)}),this.cloak.addEventListener("click",function(e){t.toggleDrawer()},!1)}},{key:"toggleDrawer",value:function(){console.warn("clicked"),this.body.classList.toggle(this.drawerClass),this.toggleAriaAttr()}},{key:"toggleAriaAttr",value:function(){this.body.classList.contains(this.drawerClass)?this.drawerElement.setAttribute("aria-hidden",!1):this.drawerElement.setAttribute("aria-hidden",!0)}}]),t}(),o.TemplateEngine=function(){function t(){i(this,t)}return r(t,null,[{key:"createHTML",value:function(t,e,n){var i=document.getElementById(n);i&&(i.innerHTML=this.templateToHTML(t,e))}},{key:"templateToHTML",value:function(t,e){var n=/\W/.test(t)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+t.replace(/[\r\t\n]/g," ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):this.CACHE[t]=this.CACHE[t]||this.templateToHTML(document.getElementById(t).innerHTML);return e?n(e):n}},{key:"CACHE",get:function(){return{}}}]),t}(),o.backToTop=function(){var t=document.getElementById("back-to-top");t&&t.addEventListener("click",function(t){window.scrollTo(0,0),t.preventDefault()},!1)},n["default"]=o},{}]},{},[3]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
